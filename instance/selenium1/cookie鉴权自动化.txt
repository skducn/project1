以下是使用 Selenium 实现 Cookie 鉴权自动化 的完整实战方案，包含登录态保存、复用、异常处理等场景，附可直接运行的代码示例：
# todo 一、核心流程：Cookie 鉴权三步骤
首次登录

获取并保存Cookie

下次启动时加载Cookie

验证鉴权状态



# todo 二、实战案例：模拟知乎自动登录（免账号密码）
场景说明：
首次运行时手动登录，保存 Cookie 到本地
后续运行直接加载 Cookie，跳过登录流程
支持 Cookie 过期自动触发重新登录
完整代码：
python
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import json
import time

class ZhihuAutoAuth:
    def __init__(self, cookie_path="zhihu_cookies.json"):
        self.driver = webdriver.Chrome()
        self.cookie_path = cookie_path
        self.base_url = "https://www.zhihu.com"
        self.login_url = f"{self.base_url}/signin"
        self.user_home_xpath = '//div[@class="UserProfileHeader"]//a[contains(@href, "/people/")]'

    def _save_cookies(self):
        """保存当前会话的Cookie到文件"""
        with open(self.cookie_path, "w") as f:
            json.dump(self.driver.get_cookies(), f)
        print(f"✅ Cookie已保存到 {self.cookie_path}")

    def _load_cookies(self):
        """从文件加载Cookie并注入浏览器"""
        try:
            with open(self.cookie_path, "r") as f:
                cookies = json.load(f)
                # 过滤无效Cookie（如过期或非当前域）
                valid_cookies = [c for c in cookies if c.get('domain') in self.base_url]
                for cookie in valid_cookies:
                    # 处理Expiry时间（Selenium要求int类型）
                    if 'expiry' in cookie and isinstance(cookie['expiry'], float):
                        cookie['expiry'] = int(cookie['expiry'])
                    self.driver.add_cookie(cookie)
                print(f"✅ 加载{len(valid_cookies)}个有效Cookie")
                return True
        except FileNotFoundError:
            print("❌ 未找到Cookie文件，需手动登录")
            return False

    def _is_logged_in(self):
        """验证是否已登录（通过用户头像元素存在性）"""
        try:
            WebDriverWait(self.driver, 5).until(
                EC.presence_of_element_located((By.XPATH, self.user_home_xpath))
            )
            return True
        except:
            return False

    def auth(self, force_login=False):
        """自动鉴权主流程"""
        self.driver.get(self.base_url)

        # 尝试加载本地Cookie（非强制登录时）
        if not force_login and self._load_cookies():
            self.driver.refresh()  # 刷新页面使Cookie生效
            if self._is_logged_in():
                print("🎉 已通过Cookie自动登录")
                return

        # 触发手动登录流程
        print("🔑 开始手动登录（请在30秒内完成）")
        self.driver.get(self.login_url)
        WebDriverWait(self.driver, 30).until(
            EC.url_changes(self.login_url)  # 等待登录成功跳转
        )

        # 保存新Cookie
        if self._is_logged_in():
            self._save_cookies()
        else:
            raise Exception("❌ 登录失败，请检查账号密码")

    def close(self):
        self.driver.quit()

# 使用示例
if __name__ == "__main__":
    auth = ZhihuAutoAuth()
    try:
        auth.auth()  # 首次运行需手动登录，后续自动复用Cookie
        # 执行需要登录的操作（例如访问个人主页）
        auth.driver.get(f"{auth.base_url}/people/your-username")
        time.sleep(3)  # 演示停留
    finally:
        auth.close()
三、关键技术解析
1. Cookie 持久化存储
保存格式：使用 JSON 存储原始 Cookie 数据（包含 domain、path、expiry 等完整信息）
过滤逻辑：只保留当前域（.zhihu.com）的有效 Cookie，避免跨域污染
时间处理：将 Cookie 的 expiry（过期时间）转换为整数（Selenium 要求）
2. 动态验证登录状态
元素定位：通过用户头像的 XPath（UserProfileHeader 类）判断登录态
显式等待：使用 WebDriverWait 避免因网络延迟导致的误判
3. 异常处理与兼容
强制登录：通过 force_login=True 参数强制重新获取 Cookie（用于过期场景）
文件不存在：首次运行时自动进入手动登录流程
Cookie 过期：刷新页面后若检测到未登录，自动触发重新登录
四、进阶技巧：多场景适配
场景 1：单页面应用（SPA）的 Cookie 注入
python
# 针对 Vue/React 等前端路由，需等待页面加载完成
def _load_cookies(self):
    super()._load_cookies()
    self.driver.execute_script("window.dispatchEvent(new Event('cookieUpdated'))")  # 触发前端 Cookie 监听
    WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.ID, "app"))  # 等待 SPA 渲染
    )
场景 2：HttpOnly Cookie 处理
限制：Selenium 无法直接操作 HttpOnly 类型的 Cookie（浏览器安全策略）
解决方案：通过浏览器插件或代理抓包获取（需配合 Charles/Fiddler）
场景 3：多账号 Cookie 隔离
python
# 按账号名区分 Cookie 文件
class MultiAccountAuth(ZhihuAutoAuth):
    def __init__(self, username):
        super().__init__(cookie_path=f"zhihu_{username}_cookies.json")
五、注意事项
Cookie 有效期：
定期检查 Cookie 过期时间（expiry 字段），建议配合定时任务自动更新
敏感业务（如支付）避免长期复用 Cookie，优先使用 Token 鉴权
安全存储：
避免明文保存 Cookie 文件，生产环境可加密存储（如使用 cryptography 库）
限制 Cookie 文件的访问权限（Linux 下 chmod 600 cookies.json）
浏览器兼容性：
不同浏览器的 Cookie 不通用（Chrome/Firefox 需单独保存）
建议固定浏览器版本（通过 webdriver-manager 管理驱动）
反爬风控：
频繁复用 Cookie 可能触发风控，建议模拟人类行为（如随机延迟、不同 UA）
配合 IP 代理池使用（针对严格风控的网站）
六、验证方法：检查 Cookie 是否生效
浏览器控制台验证：
javascript
// 登录后执行，确认 Cookie 包含认证信息
document.cookie.split('; ').forEach(c => console.log(c));
// 预期包含：z_c0（知乎用户标识）、d_c0（设备指纹）等

接口验证（配合 Requests）：
python
import requests
headers = {"Cookie": "your_cookie_string"}
res = requests.get("https://www.zhihu.com/api/v4/me", headers=headers)
assert res.status_code == 200, "Cookie 无效"

通过以上方案，可实现 90% 以上 Web 系统的 Cookie 鉴权自动化，减少重复登录操作，提升自动化脚本的稳定性和执行效率。实际使用中需根据目标网站的 Cookie 机制（如 SameSite、Secure 标记）调整策略。
